name: Database Operations

on:
  push:
    paths:
      - 'data/**'
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation type'
        required: true
        type: choice
        options:
          - create
          - read
          - update
          - delete
          - list
          - find
      id:
        description: 'Document ID'
        required: false
        type: string
      data:
        description: 'JSON data or filter conditions'
        required: false
        type: string

jobs:
  database:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true

      - name: Set up Git LFS
        run: |
          git lfs install
          git lfs pull

      - name: Download github-db
        run: |
          curl -L -o github-db https://github.com/OWNER/github-db/releases/latest/download/github-db-linux-x86_64
          chmod +x github-db

      - name: Set up database credentials
        run: |
          # Get certificate from secret
          echo "${{ secrets.DB_CERT }}" | base64 -d > db.cert
          chmod 600 db.cert

          # Set up command base with encryption if key is provided
          if [ ! -z "${{ secrets.DB_KEY }}" ]; then
            echo "DB_CMD=./github-db --cert db.cert --key ${{ secrets.DB_KEY }}" >> $GITHUB_ENV
          else
            echo "DB_CMD=./github-db --cert db.cert" >> $GITHUB_ENV
          fi

      - name: Process File Changes
        if: github.event_name == 'push'
        run: |
          # Process changed files
          for file in $(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep '^data/.*\.json$'); do
            if [ -f "$file" ]; then
              # File was created or modified
              id=$(basename "$file" .json)
              if $DB_CMD list | grep -q "\"$id\""; then
                echo "Updating $id"
                cat "$file" | $DB_CMD --stdin update "$id"
              else
                echo "Creating $id"
                cat "$file" | $DB_CMD --stdin create "$id"
              fi
            else
              # File was deleted
              id=$(basename "$file" .json)
              echo "Deleting $id"
              $DB_CMD delete "$id"
            fi
          done

      - name: Execute Database Operation
        if: github.event_name == 'workflow_dispatch'
        run: |
          case "${{ github.event.inputs.operation }}" in
            create|update)
              if [ -z "${{ github.event.inputs.data }}" ]; then
                echo "Data is required for create/update operations"
                exit 1
              fi
              echo '${{ github.event.inputs.data }}' | $DB_CMD --stdin ${{ github.event.inputs.operation }} ${{ github.event.inputs.id }}
              ;;
            read|delete)
              $DB_CMD ${{ github.event.inputs.operation }} ${{ github.event.inputs.id }}
              ;;
            list)
              $DB_CMD list
              ;;
            find)
              if [ -z "${{ github.event.inputs.data }}" ]; then
                echo "Filter conditions are required for find operation"
                exit 1
              fi
              echo '${{ github.event.inputs.data }}' | $DB_CMD --stdin find
              ;;
          esac

      - name: Cleanup Credentials
        if: always()
        run: |
          shred -u db.cert

      - name: Commit Changes
        if: github.event_name == 'push'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .github-db/
          git commit -m "Database operation: ${{ github.event.inputs.operation || 'file sync' }} [skip ci]" || echo "No changes to commit"
          git push
